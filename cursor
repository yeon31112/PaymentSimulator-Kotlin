version: 1.0

# 결제 시스템 시뮬레이터 (PaymentSimulator-Kotlin) Cursor Rules

# 코드 스타일 규칙
style_rules:
  kotlin:
    indent: 4               # 들여쓰기 4 공백 사용
    max_line_length: 120    # 최대 줄 길이 120자
    trailing_comma: true    # 마지막 요소 후 쉼표 사용
    import_ordering: true   # 임포트 알파벳 순 정렬

# 자동 완성 규칙
autocomplete:
  kotlin:
    enabled: true
    smart_snippets: true    # 스마트 스니펫 활성화

# 프로젝트 구조 규칙
project_structure:
  # 주요 디렉토리 구조
  directories:
    - src/main/kotlin/com/donait/paymentsimulator        # 메인 소스 디렉토리
    - src/main/kotlin/com/donait/paymentsimulator/controller  # 컨트롤러
    - src/main/kotlin/com/donait/paymentsimulator/service     # 서비스
    - src/main/kotlin/com/donait/paymentsimulator/repository  # 레포지토리
    - src/main/kotlin/com/donait/paymentsimulator/model       # 모델/엔티티
    - src/main/kotlin/com/donait/paymentsimulator/dto         # DTO
    - src/main/kotlin/com/donait/paymentsimulator/config      # 설정
    - src/main/kotlin/com/donait/paymentsimulator/exception   # 예외
    - src/main/kotlin/com/donait/paymentsimulator/security    # 보안
    - src/main/kotlin/com/donait/paymentsimulator/util        # 유틸리티
    - src/main/resources                                      # 리소스
    - src/test/kotlin/com/donait/paymentsimulator             # 테스트

# 파일 네이밍 규칙
file_naming:
  kotlin:
    controller_suffix: Controller       # 컨트롤러 파일 접미사
    service_suffix: Service             # 서비스 파일 접미사
    repository_suffix: Repository       # 레포지토리 파일 접미사
    entity_suffix: ""                   # 엔티티 파일 접미사 없음
    dto_suffix: Dto                     # DTO 파일 접미사
    test_prefix: ""                     # 테스트 파일 접두사 없음
    test_suffix: Test                   # 테스트 파일 접미사

# 코드 생성 템플릿
code_templates:
  kotlin:
    controller:
      template: |
        package com.donait.paymentsimulator.controller

        import org.springframework.web.bind.annotation.*
        import org.springframework.http.ResponseEntity
        import org.springframework.validation.annotation.Validated
        import javax.validation.Valid

        @RestController
        @RequestMapping("/api")
        @Validated
        class $NAME$Controller(private val $name$Service: $NAME$Service) {
            
            // TODO: API 엔드포인트 구현
        }
    
    service:
      template: |
        package com.donait.paymentsimulator.service

        import org.springframework.stereotype.Service
        import org.springframework.transaction.annotation.Transactional

        @Service
        class $NAME$Service(private val $name$Repository: $NAME$Repository) {
            
            // TODO: 서비스 로직 구현
        }
    
    repository:
      template: |
        package com.donait.paymentsimulator.repository

        import org.springframework.data.jpa.repository.JpaRepository
        import org.springframework.stereotype.Repository
        import com.donait.paymentsimulator.model.$NAME$

        @Repository
        interface $NAME$Repository : JpaRepository<$NAME$, Long> {
            
            // TODO: 커스텀 쿼리 메소드 추가
        }
    
    entity:
      template: |
        package com.donait.paymentsimulator.model

        import javax.persistence.*
        import java.time.LocalDateTime

        @Entity
        @Table(name = "$name$s")
        data class $NAME$(
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            val id: Long = 0,
            
            // TODO: 필드 추가
            
            @Column(updatable = false)
            val createdAt: LocalDateTime = LocalDateTime.now(),
            
            @Column
            var updatedAt: LocalDateTime = LocalDateTime.now()
        )
    
    dto:
      template: |
        package com.donait.paymentsimulator.dto

        import javax.validation.constraints.*
        import java.time.LocalDateTime

        data class $NAME$Dto(
            // TODO: DTO 필드 추가
        )

# CI/CD 통합 설정
ci_cd:
  build_command: "./gradlew build"
  test_command: "./gradlew test"
  lint_command: "./gradlew ktlintCheck"

# 로깅 및 디버깅 설정
logging:
  level: INFO
  format: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# 포멧팅 규칙
formatting:
  kotlin:
    ktlint_enabled: true    # ktlint 활성화
    use_spaces: true        # 탭 대신 공백 사용
    indentation_size: 4     # 들여쓰기 크기 4
    continuation_indent: 4  # 연속 들여쓰기 크기 4

# 파일 관련 규칙
file_rules:
  encoding: UTF-8           # 파일 인코딩 UTF-8
  line_ending: LF           # 줄 끝 문자 LF (Line Feed) 
